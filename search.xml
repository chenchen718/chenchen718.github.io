<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Build your own technical blog--- markdown, Hexo, and github]]></title>
    <url>%2F2017%2F07%2F14%2FBlogbuild%2F</url>
    <content type="text"><![CDATA[Recently, I’ve decided to start my own technical blog, aiming at summarizing and sharing what I’ve learned, and discussing with interested peers. Here are my requirements: Technical blog platform, where I can easily use markdown to write equations and codes; Having a comment board so that I can interact with my readers; User friendly, meaning I can use a local GUI client to edit my article; Easy to set up considering that I am a beginner. At first, I thought writing blogs would be just like writing an article on facebook, choosing a good website and opening an account on it being the biggest chore you have to go through. You write in a local client software (some powerful editor like Word) provided by the website, and just need to click ‘submit’ after you finish. Everything will be displayed in your corresponding online account nice and neat and other can see your article immediately. Unfortunately, it turned out to be not the case at all. After researching on ‘best technical blog platforms’ for a while, I did learned about a couple of blog platform names, such as wordpress, Hugo, blogger, etc, but none of these are easy to start as well as satisfying my needs. All the relevant introductory materials are full of ugly commands, there being no step-by-step visual guidance about which button to click on as I expected. I finally understand that maybe that’s the way that tech people showcase their technical knowledge. The blog companies shouldn’t take away their chance of doing so. Having accepted the reality, I still need to go ahead and build my blog based on all the ugly procedures. Although we cannot avoid all the tedious work, we can at least make it clear. With the hope that you could go around the mess as I started with, I write about how I build my blog here as the first article in my blog. 1. ToolsYou need 3 software tools to start your blog journey. Please note that all the following tools and steps apply to Windows 64 bits system and may not work well for other system.s 1.1. Markdown editorThis is the most straightforward step: finding a editor software to write your article with. Since technical blog articles might contain a lot of codes or equations, we’d better choose an editor that supports markdown well. I prefer one that allows me to save my file on my local disk and that supports instant output. Options are: Cmd markdown VScode Sublime text Ynote Although I saw a lot of recommondations for MarkdownPad, I personally dislike its medieval looking and it kept bugging while I was trying. So it’s out of the list. Currently, I am using Cmd markdown and so far so good. 1.2. Local site generatorThis tool helps generate and manage our personal website on our local computer and to submit everything to the server. Popular ones include: Hexo Jekyll People highly recommond Jekyll for its alleged flexibility and simpleness. But it turned out to be still over my head after I read the official instructions as well as other introductory articles. I happened to come across a couple of blogs powered by Hexo, which seem to me beatiful and elegant, therefore, I ended up using Hexo. 1.3 Server blog frameworkThis is where you put your blog files and where people visit to see your published blog contents. I believe these days most computer programmers and researchers know about github, which is a very powerful repository for code management. Moreover, in github you can also build your personal website with github pages. It has several obvious strenghs compared to other frameworks: free of charge granting freedom supporting markdown In the following sections, I will detail how to base on Hexo and github pages to build your blog. 2. Install and configure Hexo2.1. Install HexoHexo has two dependent software tools Node.js and Git, which should be installed up front. Here are all the three steps to finish installing Hexo: Download and install Node.js Download and install Git Install Hexo using command Install Hexo using git-bashOpen Git-bash you have just installed and you’ll see its terminal-like interface. It’s where you input your command to install Hexo and also to manage your website. Input the following command1npm install -g hexo-cli and you’ll be finishing installing Hexo. 2.2 Build your local website using HexoChoose a local folder as the repository directory for your website, e.g. D:/hexo, and input the following commands to initialize Hexo in the folder 123hexo init D:/hexocd D:/hexonpm install Once initialized, here�s what your project folder will look like 12345678.??? _config.yml??? package.json??? scaffolds??? source| ??? _drafts| ??? _posts??? themes Please refer to the official documentary of Hexo for the what each file or folder stands for. Now you can start your local website by inputting 1hexo server Use the url http://localhost:4000/ in your webbrowser to visit your website. 2.3. Change hexo themeThis is an option step. You can stick to the default theme if you like. There are plenty of nice themes on the Internet. You can download one and make it your own theme. Here, I take the popular Next theme as an example. 2.3.1. Download the theme NextYou download it here, extract it and rename it to ‘next’. Then copy the entire ‘next’ folder to the directory ‘D:/hexo/themes’. 2.3.2. Change your own theme to NextOpen the file ‘_config.yml’ in the directory ‘D:/Hexo’, find the theme field and change its value to ‘next’. 1234# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: next 2.3.3. Verify if the new theme is workingInput1hexo s --debug Then visit your local url http://localhost:4000/ to see if the theme has changed. 2.3.4. Personallize your Next configurationHere I provide the following links for your reference. They already have very detailed guidance on configuring the next theme. http://theme-next.iissnan.com/theme-settings.html http://volcfamily.cn/2016/10/03/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/ http://barrysite.me/2017/05/07/Hexo%20Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/ 2.4. Publish an article2.4.1 Create a new ‘.md’ fileYou can simply write an article using your markdown editor, and save the ‘.md’ file in the directory ‘D:/hexo/source/_post’. Or you can use the following command to generate a new article 1hexo n &quot;name of your article&quot; Then you’ll see a new file named ‘name of the new article.md’ in the directory ‘d:/hexo/source/_post’. 2.4.2. Update the websiteInput the command1hexo g -d 3. Deploy your website to github3.1. Establish your github pages First, you need to have a github account. Please go to github official website to sign up. Second, create a github repository that has exactly the same username as your account username. For example, if your github username is ‘Cathy’, then your repository should be ‘Cathey.github.io’. Please go here for creating a repository. 3.2. Configure SSH3.2.1. Generate SSH KeyCheck if you already have SSH Key. Input the following commands in Git Bash 1cd ~/.ssh If it complains that the fold doesn’t exist, you need to make a new one by the following 1ssh-keygen -t rsa -C &quot;your email&quot; in which, your email is the email address you used to sign up in github. You just need to hit enter in the following steps. 3.2.2. Copy your SSH Key and past it into your github accountOpen the file ~/.ssh/id_rsa.pub, and copy all the contents. Log into your github account. At the upper right corner, click on your account icon –&gt; Settings, and ‘find SSH and GPG keys’ on the left side. Click on the green button ‘New SSH key’, fill a title (anything you name), and past hte contents in ‘in_rsa.pub’ into the Key box. Click the green button ‘Add SSH key’ at the last. 3.2.3. Test SSHInput the following in Git Bash: 1ssh -T git@github.com You’ve set your key successfully if you get the following feedback: 1Hi username! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 3.3. Configure your github account in Git Bash Input the following commands12git config --global user.name &quot;username&quot;git config --global user.email &quot;email&quot; where “username” and “email” are your github username and registered email respectively. Check if you have your username and email correctly by inputting 1git config --list 3.4. Signify your github repository in the Hexo configuration fileOpen the file ‘_config.yml’ in the D:/Study/hexo folder, find the ‘deploy’ section and fill in the following information 12345# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:MyGithub/MyGithub.github.io where “MyGithub” is the username of your github account. Please note that in all ‘.yml’ files, there should be one and only one semiangle space after colon. 3.5. Deploy your local websit to your Github pagesInstall the plugin hexo-deployer-git1npm install hexo-deployer-git --save Then, in the directory ‘D:/hexo’, enter the following commands12hexo generate # compile your local fileshexo deploy # deploy to github]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>github</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Studying notes on R-CNN]]></title>
    <url>%2F2017%2F07%2F13%2FR-CNN%2F</url>
    <content type="text"></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>deep learning</tag>
        <tag>object detection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to start bloging using Hexo and github]]></title>
    <url>%2F2017%2F07%2F13%2FHexo-and-github%2F</url>
    <content type="text"></content>
      <categories>
        <category>techniques</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>github</tag>
        <tag>webpage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello world]]></title>
    <url>%2F2017%2F07%2F13%2Fnew-post%2F</url>
    <content type="text"></content>
      <tags>
        <tag>test</tag>
        <tag>first post</tag>
      </tags>
  </entry>
</search>